Technical Notes
===============
1. URLL requires socat, an advanced alternative to netcat, that allows to
   establish both uni- and bi-directional TCP/UDP connections.
2. While in listening mode, the socat program allows to specify a script which
   it executes at each incoming request.
3. Precisely, the configuration is-
   - tcp-listen:1230 (to only listen to, only TCP requests)
   - reuseaddr (to allow socat to reuse this port, in case the service was
     started previously)
   - fork (to fork a new process at each incoming request)
   - system:<script_name> (to execute using system call, the <script_name>)
4. For improving the user experience, the responsibility of starting the URLL
   module is given to a new script init_urll.sh created by './setup' under
   /etc/profile.d, being where it runs after user logs in.
8. This script does nothing but start the listener process in the background.
9. The URL launcher script simply reads the input and launches the uncommented
   browser in incognito/private mode.
10. Now, as the URLL module now starts during system startup, if ever it needs
   to be stopped, kill -9 is used to terminate the process IDs obtained by
   piping ps (for listing processes), grep (for searching URLL processes) and
   awk (for extracting PIDs).

Archives
========

Startup using .bashrc
---------------------
1. As an alternative to starting URLL at system startup, the URLL script was
   made to start through .bashrc.
2. However, this has two main disadvantages-
   i- it requires the terminal to be opened at least once in order for the
      URLL process to start and
   ii- consequently, the listener is started every single time a terminal is
       opened.
3. So another option, rc.local was explored.

Startup using rc.local
----------------------
1. The responsibility of strating URLL at system startup was given to rc.local
   (present under /etc/) which executes at system startup.
2. However, as URLL is intended to be used by only non-root or normal users
   (due to the very restriction on google-chrome), rc.local would run the
   script on behalf of the user specified through an environment variable that
   would be required to be set during URLL setup.
3. Moreover, rc.local (being run at system startup) would run as a root user
   process and therefore it would use 'su' to create a new session and run the
   URLL starting script from within it, preserving the minimal environment
   variables that it just exported.
4. This however brought into picture the limitation on the graphics quality of
   browsers. As the exhaustive list of environment variables would not be set,
   set for this new session, whenever the module would launch a browser, its
   graphics rendering quality would be primitive and clearly evident.
5. The errors, if any, related to rc.local can be seen using the systemctl tool
   as: systemctl status rc.local
6. Drawing from the observations of using both .bashrc and rc.local, employing
   a new script from under /etc/profile.d turned out just the right choice.

-------------------
Author- Rishi Dabre
